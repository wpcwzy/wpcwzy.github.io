<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vscode-luogu插件开发个人备忘</title>
    <url>/2023/06/16/vscode-luogu/</url>
    <content><![CDATA[<p>先删除 <code>node_modules</code> 再执行 <code>npm install</code></p>
<p>发布前需要更新以下这些文件中的版本和CHANGELOG信息：</p>
<ul>
<li>extension.js</li>
<li>package.json</li>
<li>CHANGELOG.md<br>并将代码从dev仓库上传至stable仓库</li>
</ul>
<p>未完待续</p>
]]></content>
      <categories>
        <category>个人备忘</category>
      </categories>
  </entry>
  <entry>
    <title>随机图片API，但是chatGPT写的</title>
    <url>/2023/06/18/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87API%EF%BC%8C%E4%BD%86%E6%98%AF-chatGPT-%E5%86%99%E7%9A%84/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>@yltx 这一阵在升级他的博客，需要实现一个从 GitHub 仓库中返回随机图片的 API ，从而实现博客背景的随机更换。在拿着 GitHub 官方的 <code>octokit</code> 手撸了一会 cloudflare worker 之后，我懒癌发作，于是开始尝试让 chatGPT 帮我完成这个简单的API。</p>
<p><em>篇幅所限，省略了一部分不重要的过程。</em></p>
<h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>第一次用chatGPT写程序，为了逐步引导它，我是这么开头的：</p>
<blockquote>
<p>编写一个 cloudflare worker 脚本，让我可以获取 GitHub指定 repo 下的目录结构</p>
</blockquote>
<p>chatGPT 是这么回答我的：</p>
<blockquote>
<p>当然！下面是一个示例的 Cloudflare Worker 脚本，可以用于获取 GitHub 指定仓库的目录结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">handleRequest</span>(event.<span class="property">request</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> repoOwner = <span class="string">&#x27;OWNER&#x27;</span>; <span class="comment">// 替换为你的仓库所有者</span></span><br><span class="line">  <span class="keyword">const</span> repoName = <span class="string">&#x27;REPO&#x27;</span>; <span class="comment">// 替换为你的仓库名称</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发起 API 请求获取仓库内容</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://api.github.com/repos/<span class="subst">$&#123;repoOwner&#125;</span>/<span class="subst">$&#123;repoName&#125;</span>/contents`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查响应是否成功</span></span><br><span class="line">  <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">`Failed to fetch repository contents. Status: <span class="subst">$&#123;response.status&#125;</span>`</span>, &#123; <span class="attr">status</span>: response.<span class="property">status</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析 API 响应的 JSON 数据</span></span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提取目录结构信息</span></span><br><span class="line">  <span class="keyword">const</span> directories = data.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">type</span> === <span class="string">&#x27;file&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">path</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回目录结构</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(directories, <span class="literal">null</span>, <span class="number">2</span>), &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请将其中的 <code>OWNER</code> 替换为 GitHub 仓库的所有者，<code>REPO</code> 替换为仓库名称。完成后，将此脚本部署为 Cloudflare Worker，并将请求指向部署的 Worker 地址，即可获取指定仓库的目录结构。</p>
<p>请注意，这段脚本使用 GitHub 的 REST API v3 进行请求，因此需要考虑 API 请求频率限制和身份验证等问题。如果需要更复杂的功能，例如递归获取所有子目录和文件，可能需要根据实际需求进行进一步开发。</p>
</blockquote>
<p>问题出现了，@yltx 的博客部署在 GitHub 的私有 repo 中，这样直接调用 API 显然是没有权限的，于是我提示它：</p>
<blockquote>
<p>API 始终返回403</p>
</blockquote>
<p>结果 chatGPT 以为我的 IP 被 block 了，开始教我如何使用代理服务（</p>
<p>这显然不是问题的关键，于是我又提示：</p>
<blockquote>
<p>不是代理的问题，是不是我没有提供我的 personal token？</p>
</blockquote>
<p>这次chatGPT理解了，在代码中加入了如下内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> personalToken = <span class="string">&#x27;PERSONAL_TOKEN&#x27;</span>; <span class="comment">// 替换为你的个人访问令牌</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建请求的头部</span></span><br><span class="line">  <span class="keyword">const</span> headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;personalToken&#125;</span>`</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Cloudflare Worker&#x27;</span>,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>很好！满分！<del>甚至 <code>User-Agent</code> 都是对的</del></p>
<p>现在，把 chatGPT 编写的 javascript 脚本用 <code>wrangler</code> 运行测试一下，效果是这样的：</p>
<p><img data-src="https://blog.wpcwzy.top/uploads/20230618022642.png"></p>
<p>返回的 json 比较复杂，实际只需要随机一个图片并返回 url 就行了。</p>
<p>继续引导它：</p>
<blockquote>
<p>好的，现在我需要你随机返回其中的一个 url 即可，注意，需要返回 raw.githubusercontent.com 域名的，以便我直接将其设置为图片的 src 属性</p>
</blockquote>
<p>于是乎，代码被 chatGPT 改成了这个样子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提取文件列表信息的直接下载链接</span></span><br><span class="line"><span class="keyword">const</span> downloadLinks = data.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">type</span> === <span class="string">&#x27;file&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">download_url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机选择一个下载链接</span></span><br><span class="line"><span class="keyword">const</span> randomDownloadLink = downloadLinks[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * downloadLinks.<span class="property">length</span>)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回随机选择的下载链接</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(randomDownloadLink, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>妙哉！很好用！</p>
<p>但这里又出现了一个小插曲：</p>
<p>@yltx 是通过 CSS 设置背景图的，而 CSS 不能实现先调用 API 再操作 DOM 的功能，所以这个 API 的需求又从返回 url 变成了直接返回图片。</p>
<p>小case！直接把新的需求甩给 chatGPT，一次就输出了正确的代码。</p>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>代码完全体如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> worker_default = &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request, env, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> repoOwner = <span class="string">&quot;wpcwzy&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> repoName = <span class="string">&quot;***&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> path = <span class="string">&quot;resources/img&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> personalToken = <span class="string">&quot;***&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> headers = &#123;</span><br><span class="line">      <span class="string">&quot;Authorization&quot;</span>: <span class="string">`Bearer <span class="subst">$&#123;personalToken&#125;</span>`</span>,</span><br><span class="line">      <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Cloudflare Worker&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://api.github.com/repos/<span class="subst">$&#123;repoOwner&#125;</span>/<span class="subst">$&#123;repoName&#125;</span>/contents/<span class="subst">$&#123;path&#125;</span>`</span>, &#123; headers &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">`Failed to fetch repository contents. Status: <span class="subst">$&#123;response.status&#125;</span>`</span>, &#123; <span class="attr">status</span>: response.<span class="property">status</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">const</span> rawFileLinks = data.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">type</span> === <span class="string">&quot;file&quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">download_url</span>.<span class="title function_">replace</span>(<span class="string">&quot;https://github.com&quot;</span>, <span class="string">&quot;https://raw.githubusercontent.com&quot;</span>));</span><br><span class="line">    <span class="keyword">const</span> randomRawFileLink = rawFileLinks[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * rawFileLinks.<span class="property">length</span>)];</span><br><span class="line">    <span class="keyword">const</span> imageResponse = <span class="keyword">await</span> <span class="title function_">fetch</span>(randomRawFileLink);</span><br><span class="line">    <span class="keyword">if</span> (!imageResponse.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">`Failed to fetch image. Status: <span class="subst">$&#123;imageResponse.status&#125;</span>`</span>, &#123; <span class="attr">status</span>: imageResponse.<span class="property">status</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> imageContent = <span class="keyword">await</span> imageResponse.<span class="title function_">arrayBuffer</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(imageContent, &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;image/png&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  worker_default <span class="keyword">as</span> <span class="keyword">default</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>浏览器直接打开的效果：</p>
<p><img data-src="https://blog.wpcwzy.top/uploads/20230618023543.png"></p>
<p>博客中的效果大家可以直接点进 <a href="https://yltx.cf/">yltx的博客</a> 瞅一瞅</p>
<h2 id="感想总结"><a href="#感想总结" class="headerlink" title="感想总结"></a>感想总结</h2><ol>
<li><p>chatGPT 的确拥有一定的编程能力，能起到不小的辅助作用。我平常较少使用 javascript 语言，但在 chatGPT 的帮助下，可以快速实现一些简单的功能。从速度上来说，简单的 API 让 chatGPT 直接实现也要比人类查阅文档、查阅样例代码再自己编写要快很多。</p>
</li>
<li><p>chatGPT 对功能的实现方式很有意思，我在自己编写时，使用了 GitHub 的 <code>octokit</code> 库，但是在云函数中使用 npm 库明显是要经过一定配置的，在运维方面稍稍麻烦一些。chatGPT 直接通过 <code>fetch</code> GitHub 的 API 来实现，较好配置，而且代码整体都实现的非常优雅，注释也很全面。</p>
</li>
<li><p>这次编写随机图片 API ，没有直接给 chatGPT 说明需求而是有意引导了一下，上来没有让他直接输出图片而是先获取repo文件目录。从整个编写的体验来看，chatGPT 或许拥有不用人工引导，输入简单需求就可直接输出代码的能力，下次可以尝试一下。</p>
</li>
</ol>
<p>最后，感谢 <a href="https://github.com/pengzhile/pandora">pengzhile&#x2F;pandora (github.com)</a> 实现的 chatGPT 反代，要不咱会被 openai 的网站整崩溃的（</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>chatGPT</tag>
        <tag>API</tag>
        <tag>随机图片</tag>
      </tags>
  </entry>
</search>
